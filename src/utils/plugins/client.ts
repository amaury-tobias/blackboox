import { dirname, resolve } from 'node:path'
import { promises as fsp } from 'node:fs'
import { fileURLToPath } from 'node:url'

import { createUnimport, getMagicString, scanDirExports } from 'unimport'
import { createUnplugin } from 'unplugin'
import { createFilter } from 'vite'
import Components from 'unplugin-vue-components/vite'

import { Blackboox } from '../../types'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// auto import `vue` `@vueuse/core` and user composables
export const autoImportClientPlugin = createUnplugin<Blackboox>((options = {}) => {
  const ctx = createUnimport({
    presets: ['vue', ...(options.client?.autoImportPresets ?? [])],
    addons: { vueTemplate: true },
  })
  const dirs = [
    resolve(options.rootDir!, options.srcDir!, 'composables'), // only root modules
    resolve(options.rootDir!, options.srcDir!, 'composables/**'), // all nested modules
  ]
  const filter = createFilter(
    [/\.[jt]sx?$/, /\.vue$/, /\.vue\?vue/, /\.svelte$/],
    [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  )

  return {
    name: 'unimport:autoimport:client',
    enforce: 'post',
    transformInclude(id) {
      return filter(id)
    },
    async transform(code, id) {
      const s = getMagicString(code)
      await ctx.injectImports(s, id)
      if (!s.hasChanged()) return

      return {
        code: s.toString(),
        map: s.generateMap(),
      }
    },
    async buildStart() {
      await ctx.modifyDynamicImports(async imports => {
        imports.push(...(await scanDirExports(dirs)))
      })

      return fsp.writeFile(
        resolve(options.buildDir!, 'auto-imports.d.ts'),
        '// Generated by blackboox' + '\n' + await ctx.generateTypeDeclarations(),
        'utf-8'
      )
    },
  }
})

// autoimport components
export const componentsPlugin = (blackboox: Blackboox) =>
  Components({
    directoryAsNamespace: true,
    dirs: [
      resolve(__dirname, '..', '..', 'src', 'app', 'components/**'), // internal components
      resolve(blackboox.rootDir!, blackboox.srcDir!, 'components'), // only root components
      resolve(blackboox.rootDir!, blackboox.srcDir!, 'components/**'), // all nested components
    ],
    dts: resolve(blackboox.rootDir!, '.blackboox', 'components.d.ts'),
  })

// autoimport useServices proxy
export const servicesClientPlugin = createUnplugin<Blackboox>((options = {}) => {
  const ctx = createUnimport({})
  const dirs = [resolve(options.rootDir!, options.buildDir!, 'dev', 'client')]
  const filter = createFilter(
    [/\.[jt]sx?$/, /\.vue$/, /\.vue\?vue/, /\.svelte$/],
    [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  )

  return {
    name: 'unimport:services:client',
    enforce: 'post',
    transformInclude(id) {
      return filter(id)
    },
    async transform(code, id) {
      const s = getMagicString(code)
      await ctx.injectImports(s, id)
      if (!s.hasChanged()) return

      return {
        code: s.toString(),
        map: s.generateMap(),
      }
    },
    async buildStart() {
      await ctx.modifyDynamicImports(async imports => {
        imports.push(...(await scanDirExports(dirs)))
      })
    },
  }
})
